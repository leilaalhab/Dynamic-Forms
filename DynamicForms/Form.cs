// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wwwroot/form.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Formpackage {

  /// <summary>Holder for reflection information generated from wwwroot/form.proto</summary>
  public static partial class FormReflection {

    #region Descriptor
    /// <summary>File descriptor for wwwroot/form.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static FormReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJ3d3dyb290L2Zvcm0ucHJvdG8SC2Zvcm1wYWNrYWdlIjYKEFN0YXJ0Rm9y",
            "bVJlcXVlc3QSDgoGRm9ybUlkGAEgASgFEhIKClByb2dyZXNzSWQYAiABKAUi",
            "cAoRSW5wdXRWYWx1ZVJlcXVlc3QSDQoFSW5kZXgYASABKAUSJwoJSW5wdXRU",
            "eXBlGAIgASgOMhQuZm9ybXBhY2thZ2UuSW5wVHlwZRIQCghOdW1WYWx1ZRgD",
            "IAEoARIRCglUZXh0VmFsdWUYBCABKAkiMgoQVmFsaWRpdHlSZXNwb25zZRIN",
            "CgVWYWxpZBgBIAEoCBIPCgdtZXNzYWdlGAIgASgJIpUBCg1JbnB1dFJlc3Bv",
            "bnNlEg0KBUluZGV4GAEgASgFEg0KBUxhYmVsGAIgASgJEhMKC1BsYWNlaG9s",
            "ZGVyGAMgASgJEicKCUlucHV0VHlwZRgEIAEoDjIULmZvcm1wYWNrYWdlLklu",
            "cFR5cGUSKAoHY2hvaWNlcxgFIAMoCzIXLmZvcm1wYWNrYWdlLlNlbmRDaG9p",
            "Y2UihQEKFElucHV0SW52YWxpZFJlc3BvbnNlEg0KBUluZGV4GAEgASgFEiUK",
            "BUVycm9yGAIgASgOMhYuZm9ybXBhY2thZ2UuRXJyb3JUeXBlEhIKCkVycm9y",
            "VmFsdWUYAyABKAESEAoITnVtVmFsdWUYBCABKAESEQoJdGV4dFZhbHVlGAUg",
            "ASgJIh4KDVByaWNlUmVzcG9uc2USDQoFUHJpY2UYASABKAEiJwoKU2VuZENo",
            "b2ljZRIKCgJJZBgBIAEoBRINCgVMYWJlbBgCIAEoCSo4CgdJbnBUeXBlEggK",
            "BFRleHQQABILCgdJbnRlZ2VyEAESCQoFRmxvYXQQAhILCgdPcHRpb25zEAMq",
            "UQoJRXJyb3JUeXBlEgwKCFJlcXVpcmVkEAASCQoFRXF1YWwQARIMCghOb3RF",
            "cXVhbBACEg8KC0dyZWF0ZXJUaGFuEAMSDAoITGVzc1RoYW4QBGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Formpackage.InpType), typeof(global::Formpackage.ErrorType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Formpackage.StartFormRequest), global::Formpackage.StartFormRequest.Parser, new[]{ "FormId", "ProgressId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Formpackage.InputValueRequest), global::Formpackage.InputValueRequest.Parser, new[]{ "Index", "InputType", "NumValue", "TextValue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Formpackage.ValidityResponse), global::Formpackage.ValidityResponse.Parser, new[]{ "Valid", "Message" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Formpackage.InputResponse), global::Formpackage.InputResponse.Parser, new[]{ "Index", "Label", "Placeholder", "InputType", "Choices" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Formpackage.InputInvalidResponse), global::Formpackage.InputInvalidResponse.Parser, new[]{ "Index", "Error", "ErrorValue", "NumValue", "TextValue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Formpackage.PriceResponse), global::Formpackage.PriceResponse.Parser, new[]{ "Price" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Formpackage.SendChoice), global::Formpackage.SendChoice.Parser, new[]{ "Id", "Label" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum InpType {
    [pbr::OriginalName("Text")] Text = 0,
    [pbr::OriginalName("Integer")] Integer = 1,
    [pbr::OriginalName("Float")] Float = 2,
    [pbr::OriginalName("Options")] Options = 3,
  }

  public enum ErrorType {
    [pbr::OriginalName("Required")] Required = 0,
    [pbr::OriginalName("Equal")] Equal = 1,
    [pbr::OriginalName("NotEqual")] NotEqual = 2,
    [pbr::OriginalName("GreaterThan")] GreaterThan = 3,
    /// <summary>
    /// DigitsOnly
    /// </summary>
    [pbr::OriginalName("LessThan")] LessThan = 4,
  }

  #endregion

  #region Messages
  /// <summary>
  /// requests
  /// </summary>
  public sealed partial class StartFormRequest : pb::IMessage<StartFormRequest> {
    private static readonly pb::MessageParser<StartFormRequest> _parser = new pb::MessageParser<StartFormRequest>(() => new StartFormRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StartFormRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Formpackage.FormReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartFormRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartFormRequest(StartFormRequest other) : this() {
      formId_ = other.formId_;
      progressId_ = other.progressId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartFormRequest Clone() {
      return new StartFormRequest(this);
    }

    /// <summary>Field number for the "FormId" field.</summary>
    public const int FormIdFieldNumber = 1;
    private int formId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FormId {
      get { return formId_; }
      set {
        formId_ = value;
      }
    }

    /// <summary>Field number for the "ProgressId" field.</summary>
    public const int ProgressIdFieldNumber = 2;
    private int progressId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ProgressId {
      get { return progressId_; }
      set {
        progressId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StartFormRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StartFormRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FormId != other.FormId) return false;
      if (ProgressId != other.ProgressId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FormId != 0) hash ^= FormId.GetHashCode();
      if (ProgressId != 0) hash ^= ProgressId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FormId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FormId);
      }
      if (ProgressId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ProgressId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FormId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FormId);
      }
      if (ProgressId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ProgressId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StartFormRequest other) {
      if (other == null) {
        return;
      }
      if (other.FormId != 0) {
        FormId = other.FormId;
      }
      if (other.ProgressId != 0) {
        ProgressId = other.ProgressId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FormId = input.ReadInt32();
            break;
          }
          case 16: {
            ProgressId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class InputValueRequest : pb::IMessage<InputValueRequest> {
    private static readonly pb::MessageParser<InputValueRequest> _parser = new pb::MessageParser<InputValueRequest>(() => new InputValueRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InputValueRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Formpackage.FormReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InputValueRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InputValueRequest(InputValueRequest other) : this() {
      index_ = other.index_;
      inputType_ = other.inputType_;
      numValue_ = other.numValue_;
      textValue_ = other.textValue_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InputValueRequest Clone() {
      return new InputValueRequest(this);
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "InputType" field.</summary>
    public const int InputTypeFieldNumber = 2;
    private global::Formpackage.InpType inputType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Formpackage.InpType InputType {
      get { return inputType_; }
      set {
        inputType_ = value;
      }
    }

    /// <summary>Field number for the "NumValue" field.</summary>
    public const int NumValueFieldNumber = 3;
    private double numValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double NumValue {
      get { return numValue_; }
      set {
        numValue_ = value;
      }
    }

    /// <summary>Field number for the "TextValue" field.</summary>
    public const int TextValueFieldNumber = 4;
    private string textValue_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TextValue {
      get { return textValue_; }
      set {
        textValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InputValueRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InputValueRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (InputType != other.InputType) return false;
      if (NumValue != other.NumValue) return false;
      if (TextValue != other.TextValue) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (InputType != 0) hash ^= InputType.GetHashCode();
      if (NumValue != 0D) hash ^= NumValue.GetHashCode();
      if (TextValue.Length != 0) hash ^= TextValue.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (InputType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) InputType);
      }
      if (NumValue != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(NumValue);
      }
      if (TextValue.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(TextValue);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (InputType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) InputType);
      }
      if (NumValue != 0D) {
        size += 1 + 8;
      }
      if (TextValue.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TextValue);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InputValueRequest other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.InputType != 0) {
        InputType = other.InputType;
      }
      if (other.NumValue != 0D) {
        NumValue = other.NumValue;
      }
      if (other.TextValue.Length != 0) {
        TextValue = other.TextValue;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 16: {
            inputType_ = (global::Formpackage.InpType) input.ReadEnum();
            break;
          }
          case 25: {
            NumValue = input.ReadDouble();
            break;
          }
          case 34: {
            TextValue = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// responses
  /// </summary>
  public sealed partial class ValidityResponse : pb::IMessage<ValidityResponse> {
    private static readonly pb::MessageParser<ValidityResponse> _parser = new pb::MessageParser<ValidityResponse>(() => new ValidityResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ValidityResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Formpackage.FormReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValidityResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValidityResponse(ValidityResponse other) : this() {
      valid_ = other.valid_;
      message_ = other.message_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValidityResponse Clone() {
      return new ValidityResponse(this);
    }

    /// <summary>Field number for the "Valid" field.</summary>
    public const int ValidFieldNumber = 1;
    private bool valid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Valid {
      get { return valid_; }
      set {
        valid_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 2;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ValidityResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ValidityResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Valid != other.Valid) return false;
      if (Message != other.Message) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Valid != false) hash ^= Valid.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Valid != false) {
        output.WriteRawTag(8);
        output.WriteBool(Valid);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Message);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Valid != false) {
        size += 1 + 1;
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ValidityResponse other) {
      if (other == null) {
        return;
      }
      if (other.Valid != false) {
        Valid = other.Valid;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Valid = input.ReadBool();
            break;
          }
          case 18: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class InputResponse : pb::IMessage<InputResponse> {
    private static readonly pb::MessageParser<InputResponse> _parser = new pb::MessageParser<InputResponse>(() => new InputResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InputResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Formpackage.FormReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InputResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InputResponse(InputResponse other) : this() {
      index_ = other.index_;
      label_ = other.label_;
      placeholder_ = other.placeholder_;
      inputType_ = other.inputType_;
      choices_ = other.choices_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InputResponse Clone() {
      return new InputResponse(this);
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "Label" field.</summary>
    public const int LabelFieldNumber = 2;
    private string label_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Label {
      get { return label_; }
      set {
        label_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Placeholder" field.</summary>
    public const int PlaceholderFieldNumber = 3;
    private string placeholder_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Placeholder {
      get { return placeholder_; }
      set {
        placeholder_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "InputType" field.</summary>
    public const int InputTypeFieldNumber = 4;
    private global::Formpackage.InpType inputType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Formpackage.InpType InputType {
      get { return inputType_; }
      set {
        inputType_ = value;
      }
    }

    /// <summary>Field number for the "choices" field.</summary>
    public const int ChoicesFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Formpackage.SendChoice> _repeated_choices_codec
        = pb::FieldCodec.ForMessage(42, global::Formpackage.SendChoice.Parser);
    private readonly pbc::RepeatedField<global::Formpackage.SendChoice> choices_ = new pbc::RepeatedField<global::Formpackage.SendChoice>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Formpackage.SendChoice> Choices {
      get { return choices_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InputResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InputResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (Label != other.Label) return false;
      if (Placeholder != other.Placeholder) return false;
      if (InputType != other.InputType) return false;
      if(!choices_.Equals(other.choices_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (Label.Length != 0) hash ^= Label.GetHashCode();
      if (Placeholder.Length != 0) hash ^= Placeholder.GetHashCode();
      if (InputType != 0) hash ^= InputType.GetHashCode();
      hash ^= choices_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (Label.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Label);
      }
      if (Placeholder.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Placeholder);
      }
      if (InputType != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) InputType);
      }
      choices_.WriteTo(output, _repeated_choices_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (Label.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Label);
      }
      if (Placeholder.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Placeholder);
      }
      if (InputType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) InputType);
      }
      size += choices_.CalculateSize(_repeated_choices_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InputResponse other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.Label.Length != 0) {
        Label = other.Label;
      }
      if (other.Placeholder.Length != 0) {
        Placeholder = other.Placeholder;
      }
      if (other.InputType != 0) {
        InputType = other.InputType;
      }
      choices_.Add(other.choices_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 18: {
            Label = input.ReadString();
            break;
          }
          case 26: {
            Placeholder = input.ReadString();
            break;
          }
          case 32: {
            inputType_ = (global::Formpackage.InpType) input.ReadEnum();
            break;
          }
          case 42: {
            choices_.AddEntriesFrom(input, _repeated_choices_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class InputInvalidResponse : pb::IMessage<InputInvalidResponse> {
    private static readonly pb::MessageParser<InputInvalidResponse> _parser = new pb::MessageParser<InputInvalidResponse>(() => new InputInvalidResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InputInvalidResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Formpackage.FormReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InputInvalidResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InputInvalidResponse(InputInvalidResponse other) : this() {
      index_ = other.index_;
      error_ = other.error_;
      errorValue_ = other.errorValue_;
      numValue_ = other.numValue_;
      textValue_ = other.textValue_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InputInvalidResponse Clone() {
      return new InputInvalidResponse(this);
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "Error" field.</summary>
    public const int ErrorFieldNumber = 2;
    private global::Formpackage.ErrorType error_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Formpackage.ErrorType Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    /// <summary>Field number for the "ErrorValue" field.</summary>
    public const int ErrorValueFieldNumber = 3;
    private double errorValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ErrorValue {
      get { return errorValue_; }
      set {
        errorValue_ = value;
      }
    }

    /// <summary>Field number for the "NumValue" field.</summary>
    public const int NumValueFieldNumber = 4;
    private double numValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double NumValue {
      get { return numValue_; }
      set {
        numValue_ = value;
      }
    }

    /// <summary>Field number for the "textValue" field.</summary>
    public const int TextValueFieldNumber = 5;
    private string textValue_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TextValue {
      get { return textValue_; }
      set {
        textValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InputInvalidResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InputInvalidResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (Error != other.Error) return false;
      if (ErrorValue != other.ErrorValue) return false;
      if (NumValue != other.NumValue) return false;
      if (TextValue != other.TextValue) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (Error != 0) hash ^= Error.GetHashCode();
      if (ErrorValue != 0D) hash ^= ErrorValue.GetHashCode();
      if (NumValue != 0D) hash ^= NumValue.GetHashCode();
      if (TextValue.Length != 0) hash ^= TextValue.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (Error != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Error);
      }
      if (ErrorValue != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(ErrorValue);
      }
      if (NumValue != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(NumValue);
      }
      if (TextValue.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(TextValue);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (Error != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Error);
      }
      if (ErrorValue != 0D) {
        size += 1 + 8;
      }
      if (NumValue != 0D) {
        size += 1 + 8;
      }
      if (TextValue.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TextValue);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InputInvalidResponse other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.Error != 0) {
        Error = other.Error;
      }
      if (other.ErrorValue != 0D) {
        ErrorValue = other.ErrorValue;
      }
      if (other.NumValue != 0D) {
        NumValue = other.NumValue;
      }
      if (other.TextValue.Length != 0) {
        TextValue = other.TextValue;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 16: {
            error_ = (global::Formpackage.ErrorType) input.ReadEnum();
            break;
          }
          case 25: {
            ErrorValue = input.ReadDouble();
            break;
          }
          case 33: {
            NumValue = input.ReadDouble();
            break;
          }
          case 42: {
            TextValue = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PriceResponse : pb::IMessage<PriceResponse> {
    private static readonly pb::MessageParser<PriceResponse> _parser = new pb::MessageParser<PriceResponse>(() => new PriceResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PriceResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Formpackage.FormReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PriceResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PriceResponse(PriceResponse other) : this() {
      price_ = other.price_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PriceResponse Clone() {
      return new PriceResponse(this);
    }

    /// <summary>Field number for the "Price" field.</summary>
    public const int PriceFieldNumber = 1;
    private double price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PriceResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PriceResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Price != other.Price) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Price != 0D) hash ^= Price.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Price != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Price);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Price != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PriceResponse other) {
      if (other == null) {
        return;
      }
      if (other.Price != 0D) {
        Price = other.Price;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            Price = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SendChoice : pb::IMessage<SendChoice> {
    private static readonly pb::MessageParser<SendChoice> _parser = new pb::MessageParser<SendChoice>(() => new SendChoice());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendChoice> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Formpackage.FormReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendChoice() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendChoice(SendChoice other) : this() {
      id_ = other.id_;
      label_ = other.label_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendChoice Clone() {
      return new SendChoice(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Label" field.</summary>
    public const int LabelFieldNumber = 2;
    private string label_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Label {
      get { return label_; }
      set {
        label_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendChoice);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendChoice other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Label != other.Label) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Label.Length != 0) hash ^= Label.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Label.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Label);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Label.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Label);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendChoice other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Label.Length != 0) {
        Label = other.Label;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Label = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
