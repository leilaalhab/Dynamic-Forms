// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wwwroot/form.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Formpackage {

  /// <summary>Holder for reflection information generated from wwwroot/form.proto</summary>
  public static partial class FormReflection {

    #region Descriptor
    /// <summary>File descriptor for wwwroot/form.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static FormReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJ3d3dyb290L2Zvcm0ucHJvdG8SC2Zvcm1wYWNrYWdlIo0BCgdSZXF1ZXN0",
            "EgoKAklkGAEgASgFEiUKB0lucFR5cGUYAiABKA4yFC5mb3JtcGFja2FnZS5J",
            "bnBUeXBlEg0KBVZhbHVlGAMgASgCEhEKCVRleHRWYWx1ZRgEIAEoCRItCgtS",
            "ZXF1ZXN0VHlwZRgFIAEoDjIYLmZvcm1wYWNrYWdlLlJlcXVlc3RUeXBlIpkC",
            "CghSZXNwb25zZRIKCgJJZBgBIAEoBRINCgVMYWJlbBgCIAEoCRITCgtQbGFj",
            "ZWhvbGRlchgDIAEoCRIlCgdJbnBUeXBlGAQgASgOMhQuZm9ybXBhY2thZ2Uu",
            "SW5wVHlwZRIlCgVFcnJvchgFIAEoDjIWLmZvcm1wYWNrYWdlLkVycm9yVHlw",
            "ZRISCgpFcnJvclZhbHVlGAYgASgBEg0KBVZhbHVlGAcgASgBEhEKCVRleHRW",
            "YWx1ZRgIIAEoCRIvCgxSZXNwb25zZVR5cGUYCSABKA4yGS5mb3JtcGFja2Fn",
            "ZS5SZXNwb25zZVR5cGUSKAoHQ2hvaWNlcxgKIAMoCzIXLmZvcm1wYWNrYWdl",
            "LlNlbmRDaG9pY2UiJwoKU2VuZENob2ljZRIKCgJJZBgBIAEoBRINCgVMYWJl",
            "bBgCIAEoCSpfCgdJbnBUeXBlEggKBFRleHQQABILCgdJbnRlZ2VyEAESCQoF",
            "RmxvYXQQAhIMCghEYXRlVGltZRADEgkKBVJhZGlvEAQSDAoIQ2hlY2tib3gQ",
            "BRILCgdPcHRpb25zEAYqLQoLUmVxdWVzdFR5cGUSDgoKSW5wdXRWYWx1ZRAA",
            "Eg4KCkZvcm1TdWJtaXQQASpqCgxSZXNwb25zZVR5cGUSEQoNSW5wdXRWYWxp",
            "ZGl0eRAAEgwKCE5ld0lucHV0EAESFgoSRm9ybVN1Ym1pdEFjY2VwdGVkEAIS",
            "FgoSRm9ybVN1Ym1pdFJlamVjdGVkEAMSCQoFUHJpY2UQBCpeCglFcnJvclR5",
            "cGUSDAoIUmVxdWlyZWQQABIJCgVFcXVhbBABEgwKCE5vdEVxdWFsEAISDwoL",
            "R3JlYXRlclRoYW4QAxIMCghMZXNzVGhhbhAEEgsKB05vRXJyb3IQBWIGcHJv",
            "dG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Formpackage.InpType), typeof(global::Formpackage.RequestType), typeof(global::Formpackage.ResponseType), typeof(global::Formpackage.ErrorType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Formpackage.Request), global::Formpackage.Request.Parser, new[]{ "Id", "InpType", "Value", "TextValue", "RequestType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Formpackage.Response), global::Formpackage.Response.Parser, new[]{ "Id", "Label", "Placeholder", "InpType", "Error", "ErrorValue", "Value", "TextValue", "ResponseType", "Choices" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Formpackage.SendChoice), global::Formpackage.SendChoice.Parser, new[]{ "Id", "Label" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum InpType {
    [pbr::OriginalName("Text")] Text = 0,
    [pbr::OriginalName("Integer")] Integer = 1,
    [pbr::OriginalName("Float")] Float = 2,
    [pbr::OriginalName("DateTime")] DateTime = 3,
    [pbr::OriginalName("Radio")] Radio = 4,
    [pbr::OriginalName("Checkbox")] Checkbox = 5,
    [pbr::OriginalName("Options")] Options = 6,
  }

  public enum RequestType {
    [pbr::OriginalName("InputValue")] InputValue = 0,
    [pbr::OriginalName("FormSubmit")] FormSubmit = 1,
  }

  public enum ResponseType {
    [pbr::OriginalName("InputValidity")] InputValidity = 0,
    [pbr::OriginalName("NewInput")] NewInput = 1,
    [pbr::OriginalName("FormSubmitAccepted")] FormSubmitAccepted = 2,
    [pbr::OriginalName("FormSubmitRejected")] FormSubmitRejected = 3,
    [pbr::OriginalName("Price")] Price = 4,
  }

  public enum ErrorType {
    [pbr::OriginalName("Required")] Required = 0,
    [pbr::OriginalName("Equal")] Equal = 1,
    [pbr::OriginalName("NotEqual")] NotEqual = 2,
    [pbr::OriginalName("GreaterThan")] GreaterThan = 3,
    [pbr::OriginalName("LessThan")] LessThan = 4,
    [pbr::OriginalName("NoError")] NoError = 5,
  }

  #endregion

  #region Messages
  public sealed partial class Request : pb::IMessage<Request> {
    private static readonly pb::MessageParser<Request> _parser = new pb::MessageParser<Request>(() => new Request());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Request> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Formpackage.FormReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Request() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Request(Request other) : this() {
      id_ = other.id_;
      inpType_ = other.inpType_;
      value_ = other.value_;
      textValue_ = other.textValue_;
      requestType_ = other.requestType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Request Clone() {
      return new Request(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "InpType" field.</summary>
    public const int InpTypeFieldNumber = 2;
    private global::Formpackage.InpType inpType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Formpackage.InpType InpType {
      get { return inpType_; }
      set {
        inpType_ = value;
      }
    }

    /// <summary>Field number for the "Value" field.</summary>
    public const int ValueFieldNumber = 3;
    private float value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "TextValue" field.</summary>
    public const int TextValueFieldNumber = 4;
    private string textValue_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TextValue {
      get { return textValue_; }
      set {
        textValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RequestType" field.</summary>
    public const int RequestTypeFieldNumber = 5;
    private global::Formpackage.RequestType requestType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Formpackage.RequestType RequestType {
      get { return requestType_; }
      set {
        requestType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Request);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Request other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (InpType != other.InpType) return false;
      if (Value != other.Value) return false;
      if (TextValue != other.TextValue) return false;
      if (RequestType != other.RequestType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (InpType != 0) hash ^= InpType.GetHashCode();
      if (Value != 0F) hash ^= Value.GetHashCode();
      if (TextValue.Length != 0) hash ^= TextValue.GetHashCode();
      if (RequestType != 0) hash ^= RequestType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (InpType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) InpType);
      }
      if (Value != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Value);
      }
      if (TextValue.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(TextValue);
      }
      if (RequestType != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) RequestType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (InpType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) InpType);
      }
      if (Value != 0F) {
        size += 1 + 4;
      }
      if (TextValue.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TextValue);
      }
      if (RequestType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RequestType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Request other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.InpType != 0) {
        InpType = other.InpType;
      }
      if (other.Value != 0F) {
        Value = other.Value;
      }
      if (other.TextValue.Length != 0) {
        TextValue = other.TextValue;
      }
      if (other.RequestType != 0) {
        RequestType = other.RequestType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            inpType_ = (global::Formpackage.InpType) input.ReadEnum();
            break;
          }
          case 29: {
            Value = input.ReadFloat();
            break;
          }
          case 34: {
            TextValue = input.ReadString();
            break;
          }
          case 40: {
            requestType_ = (global::Formpackage.RequestType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Response : pb::IMessage<Response> {
    private static readonly pb::MessageParser<Response> _parser = new pb::MessageParser<Response>(() => new Response());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Response> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Formpackage.FormReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response(Response other) : this() {
      id_ = other.id_;
      label_ = other.label_;
      placeholder_ = other.placeholder_;
      inpType_ = other.inpType_;
      error_ = other.error_;
      errorValue_ = other.errorValue_;
      value_ = other.value_;
      textValue_ = other.textValue_;
      responseType_ = other.responseType_;
      choices_ = other.choices_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response Clone() {
      return new Response(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Label" field.</summary>
    public const int LabelFieldNumber = 2;
    private string label_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Label {
      get { return label_; }
      set {
        label_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Placeholder" field.</summary>
    public const int PlaceholderFieldNumber = 3;
    private string placeholder_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Placeholder {
      get { return placeholder_; }
      set {
        placeholder_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "InpType" field.</summary>
    public const int InpTypeFieldNumber = 4;
    private global::Formpackage.InpType inpType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Formpackage.InpType InpType {
      get { return inpType_; }
      set {
        inpType_ = value;
      }
    }

    /// <summary>Field number for the "Error" field.</summary>
    public const int ErrorFieldNumber = 5;
    private global::Formpackage.ErrorType error_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Formpackage.ErrorType Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    /// <summary>Field number for the "ErrorValue" field.</summary>
    public const int ErrorValueFieldNumber = 6;
    private double errorValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ErrorValue {
      get { return errorValue_; }
      set {
        errorValue_ = value;
      }
    }

    /// <summary>Field number for the "Value" field.</summary>
    public const int ValueFieldNumber = 7;
    private double value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "TextValue" field.</summary>
    public const int TextValueFieldNumber = 8;
    private string textValue_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TextValue {
      get { return textValue_; }
      set {
        textValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ResponseType" field.</summary>
    public const int ResponseTypeFieldNumber = 9;
    private global::Formpackage.ResponseType responseType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Formpackage.ResponseType ResponseType {
      get { return responseType_; }
      set {
        responseType_ = value;
      }
    }

    /// <summary>Field number for the "Choices" field.</summary>
    public const int ChoicesFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Formpackage.SendChoice> _repeated_choices_codec
        = pb::FieldCodec.ForMessage(82, global::Formpackage.SendChoice.Parser);
    private readonly pbc::RepeatedField<global::Formpackage.SendChoice> choices_ = new pbc::RepeatedField<global::Formpackage.SendChoice>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Formpackage.SendChoice> Choices {
      get { return choices_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Response);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Response other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Label != other.Label) return false;
      if (Placeholder != other.Placeholder) return false;
      if (InpType != other.InpType) return false;
      if (Error != other.Error) return false;
      if (ErrorValue != other.ErrorValue) return false;
      if (Value != other.Value) return false;
      if (TextValue != other.TextValue) return false;
      if (ResponseType != other.ResponseType) return false;
      if(!choices_.Equals(other.choices_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Label.Length != 0) hash ^= Label.GetHashCode();
      if (Placeholder.Length != 0) hash ^= Placeholder.GetHashCode();
      if (InpType != 0) hash ^= InpType.GetHashCode();
      if (Error != 0) hash ^= Error.GetHashCode();
      if (ErrorValue != 0D) hash ^= ErrorValue.GetHashCode();
      if (Value != 0D) hash ^= Value.GetHashCode();
      if (TextValue.Length != 0) hash ^= TextValue.GetHashCode();
      if (ResponseType != 0) hash ^= ResponseType.GetHashCode();
      hash ^= choices_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Label.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Label);
      }
      if (Placeholder.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Placeholder);
      }
      if (InpType != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) InpType);
      }
      if (Error != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Error);
      }
      if (ErrorValue != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(ErrorValue);
      }
      if (Value != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(Value);
      }
      if (TextValue.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(TextValue);
      }
      if (ResponseType != 0) {
        output.WriteRawTag(72);
        output.WriteEnum((int) ResponseType);
      }
      choices_.WriteTo(output, _repeated_choices_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Label.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Label);
      }
      if (Placeholder.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Placeholder);
      }
      if (InpType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) InpType);
      }
      if (Error != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Error);
      }
      if (ErrorValue != 0D) {
        size += 1 + 8;
      }
      if (Value != 0D) {
        size += 1 + 8;
      }
      if (TextValue.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TextValue);
      }
      if (ResponseType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ResponseType);
      }
      size += choices_.CalculateSize(_repeated_choices_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Response other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Label.Length != 0) {
        Label = other.Label;
      }
      if (other.Placeholder.Length != 0) {
        Placeholder = other.Placeholder;
      }
      if (other.InpType != 0) {
        InpType = other.InpType;
      }
      if (other.Error != 0) {
        Error = other.Error;
      }
      if (other.ErrorValue != 0D) {
        ErrorValue = other.ErrorValue;
      }
      if (other.Value != 0D) {
        Value = other.Value;
      }
      if (other.TextValue.Length != 0) {
        TextValue = other.TextValue;
      }
      if (other.ResponseType != 0) {
        ResponseType = other.ResponseType;
      }
      choices_.Add(other.choices_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Label = input.ReadString();
            break;
          }
          case 26: {
            Placeholder = input.ReadString();
            break;
          }
          case 32: {
            inpType_ = (global::Formpackage.InpType) input.ReadEnum();
            break;
          }
          case 40: {
            error_ = (global::Formpackage.ErrorType) input.ReadEnum();
            break;
          }
          case 49: {
            ErrorValue = input.ReadDouble();
            break;
          }
          case 57: {
            Value = input.ReadDouble();
            break;
          }
          case 66: {
            TextValue = input.ReadString();
            break;
          }
          case 72: {
            responseType_ = (global::Formpackage.ResponseType) input.ReadEnum();
            break;
          }
          case 82: {
            choices_.AddEntriesFrom(input, _repeated_choices_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SendChoice : pb::IMessage<SendChoice> {
    private static readonly pb::MessageParser<SendChoice> _parser = new pb::MessageParser<SendChoice>(() => new SendChoice());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendChoice> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Formpackage.FormReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendChoice() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendChoice(SendChoice other) : this() {
      id_ = other.id_;
      label_ = other.label_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendChoice Clone() {
      return new SendChoice(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Label" field.</summary>
    public const int LabelFieldNumber = 2;
    private string label_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Label {
      get { return label_; }
      set {
        label_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendChoice);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendChoice other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Label != other.Label) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Label.Length != 0) hash ^= Label.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Label.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Label);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Label.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Label);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendChoice other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Label.Length != 0) {
        Label = other.Label;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Label = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
