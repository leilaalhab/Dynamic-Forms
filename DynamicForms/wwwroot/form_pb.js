/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.exportSymbol('proto.formpackage.ErrorType', null, global);
goog.exportSymbol('proto.formpackage.InpType', null, global);
goog.exportSymbol('proto.formpackage.InputInvalidResponse', null, global);
goog.exportSymbol('proto.formpackage.InputResponse', null, global);
goog.exportSymbol('proto.formpackage.InputValueRequest', null, global);
goog.exportSymbol('proto.formpackage.PriceResponse', null, global);
goog.exportSymbol('proto.formpackage.SendChoice', null, global);
goog.exportSymbol('proto.formpackage.StartFormRequest', null, global);
goog.exportSymbol('proto.formpackage.ValidityResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.formpackage.StartFormRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.formpackage.StartFormRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.formpackage.StartFormRequest.displayName = 'proto.formpackage.StartFormRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.formpackage.StartFormRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.formpackage.StartFormRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.formpackage.StartFormRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.formpackage.StartFormRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    formid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    progressid: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.formpackage.StartFormRequest}
 */
proto.formpackage.StartFormRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.formpackage.StartFormRequest;
  return proto.formpackage.StartFormRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.formpackage.StartFormRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.formpackage.StartFormRequest}
 */
proto.formpackage.StartFormRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFormid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setProgressid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.formpackage.StartFormRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.formpackage.StartFormRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.formpackage.StartFormRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.formpackage.StartFormRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFormid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getProgressid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 FormId = 1;
 * @return {number}
 */
proto.formpackage.StartFormRequest.prototype.getFormid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.formpackage.StartFormRequest.prototype.setFormid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 ProgressId = 2;
 * @return {number}
 */
proto.formpackage.StartFormRequest.prototype.getProgressid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.formpackage.StartFormRequest.prototype.setProgressid = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.formpackage.InputValueRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.formpackage.InputValueRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.formpackage.InputValueRequest.displayName = 'proto.formpackage.InputValueRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.formpackage.InputValueRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.formpackage.InputValueRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.formpackage.InputValueRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.formpackage.InputValueRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    index: jspb.Message.getFieldWithDefault(msg, 1, 0),
    inputtype: jspb.Message.getFieldWithDefault(msg, 2, 0),
    numvalue: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    textvalue: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.formpackage.InputValueRequest}
 */
proto.formpackage.InputValueRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.formpackage.InputValueRequest;
  return proto.formpackage.InputValueRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.formpackage.InputValueRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.formpackage.InputValueRequest}
 */
proto.formpackage.InputValueRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIndex(value);
      break;
    case 2:
      var value = /** @type {!proto.formpackage.InpType} */ (reader.readEnum());
      msg.setInputtype(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setNumvalue(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTextvalue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.formpackage.InputValueRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.formpackage.InputValueRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.formpackage.InputValueRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.formpackage.InputValueRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndex();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getInputtype();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getNumvalue();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getTextvalue();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional int32 Index = 1;
 * @return {number}
 */
proto.formpackage.InputValueRequest.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.formpackage.InputValueRequest.prototype.setIndex = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional InpType InputType = 2;
 * @return {!proto.formpackage.InpType}
 */
proto.formpackage.InputValueRequest.prototype.getInputtype = function() {
  return /** @type {!proto.formpackage.InpType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.formpackage.InpType} value */
proto.formpackage.InputValueRequest.prototype.setInputtype = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional double NumValue = 3;
 * @return {number}
 */
proto.formpackage.InputValueRequest.prototype.getNumvalue = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.formpackage.InputValueRequest.prototype.setNumvalue = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string TextValue = 4;
 * @return {string}
 */
proto.formpackage.InputValueRequest.prototype.getTextvalue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.formpackage.InputValueRequest.prototype.setTextvalue = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.formpackage.ValidityResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.formpackage.ValidityResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.formpackage.ValidityResponse.displayName = 'proto.formpackage.ValidityResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.formpackage.ValidityResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.formpackage.ValidityResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.formpackage.ValidityResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.formpackage.ValidityResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    valid: jspb.Message.getFieldWithDefault(msg, 1, false),
    message: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.formpackage.ValidityResponse}
 */
proto.formpackage.ValidityResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.formpackage.ValidityResponse;
  return proto.formpackage.ValidityResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.formpackage.ValidityResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.formpackage.ValidityResponse}
 */
proto.formpackage.ValidityResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setValid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.formpackage.ValidityResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.formpackage.ValidityResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.formpackage.ValidityResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.formpackage.ValidityResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValid();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bool Valid = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.formpackage.ValidityResponse.prototype.getValid = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.formpackage.ValidityResponse.prototype.setValid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.formpackage.ValidityResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.formpackage.ValidityResponse.prototype.setMessage = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.formpackage.InputResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.formpackage.InputResponse.repeatedFields_, null);
};
goog.inherits(proto.formpackage.InputResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.formpackage.InputResponse.displayName = 'proto.formpackage.InputResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.formpackage.InputResponse.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.formpackage.InputResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.formpackage.InputResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.formpackage.InputResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.formpackage.InputResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    index: jspb.Message.getFieldWithDefault(msg, 1, 0),
    label: jspb.Message.getFieldWithDefault(msg, 2, ""),
    placeholder: jspb.Message.getFieldWithDefault(msg, 3, ""),
    inputtype: jspb.Message.getFieldWithDefault(msg, 4, 0),
    choicesList: jspb.Message.toObjectList(msg.getChoicesList(),
    proto.formpackage.SendChoice.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.formpackage.InputResponse}
 */
proto.formpackage.InputResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.formpackage.InputResponse;
  return proto.formpackage.InputResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.formpackage.InputResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.formpackage.InputResponse}
 */
proto.formpackage.InputResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIndex(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabel(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlaceholder(value);
      break;
    case 4:
      var value = /** @type {!proto.formpackage.InpType} */ (reader.readEnum());
      msg.setInputtype(value);
      break;
    case 5:
      var value = new proto.formpackage.SendChoice;
      reader.readMessage(value,proto.formpackage.SendChoice.deserializeBinaryFromReader);
      msg.addChoices(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.formpackage.InputResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.formpackage.InputResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.formpackage.InputResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.formpackage.InputResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndex();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getLabel();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPlaceholder();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getInputtype();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getChoicesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.formpackage.SendChoice.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 Index = 1;
 * @return {number}
 */
proto.formpackage.InputResponse.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.formpackage.InputResponse.prototype.setIndex = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string Label = 2;
 * @return {string}
 */
proto.formpackage.InputResponse.prototype.getLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.formpackage.InputResponse.prototype.setLabel = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string Placeholder = 3;
 * @return {string}
 */
proto.formpackage.InputResponse.prototype.getPlaceholder = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.formpackage.InputResponse.prototype.setPlaceholder = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional InpType InputType = 4;
 * @return {!proto.formpackage.InpType}
 */
proto.formpackage.InputResponse.prototype.getInputtype = function() {
  return /** @type {!proto.formpackage.InpType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.formpackage.InpType} value */
proto.formpackage.InputResponse.prototype.setInputtype = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * repeated SendChoice choices = 5;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.formpackage.SendChoice>}
 */
proto.formpackage.InputResponse.prototype.getChoicesList = function() {
  return /** @type{!Array.<!proto.formpackage.SendChoice>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.formpackage.SendChoice, 5));
};


/** @param {!Array.<!proto.formpackage.SendChoice>} value */
proto.formpackage.InputResponse.prototype.setChoicesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.formpackage.SendChoice=} opt_value
 * @param {number=} opt_index
 * @return {!proto.formpackage.SendChoice}
 */
proto.formpackage.InputResponse.prototype.addChoices = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.formpackage.SendChoice, opt_index);
};


proto.formpackage.InputResponse.prototype.clearChoicesList = function() {
  this.setChoicesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.formpackage.InputInvalidResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.formpackage.InputInvalidResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.formpackage.InputInvalidResponse.displayName = 'proto.formpackage.InputInvalidResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.formpackage.InputInvalidResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.formpackage.InputInvalidResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.formpackage.InputInvalidResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.formpackage.InputInvalidResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    index: jspb.Message.getFieldWithDefault(msg, 1, 0),
    error: jspb.Message.getFieldWithDefault(msg, 2, 0),
    errorvalue: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    numvalue: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
    textvalue: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.formpackage.InputInvalidResponse}
 */
proto.formpackage.InputInvalidResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.formpackage.InputInvalidResponse;
  return proto.formpackage.InputInvalidResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.formpackage.InputInvalidResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.formpackage.InputInvalidResponse}
 */
proto.formpackage.InputInvalidResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIndex(value);
      break;
    case 2:
      var value = /** @type {!proto.formpackage.ErrorType} */ (reader.readEnum());
      msg.setError(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setErrorvalue(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setNumvalue(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTextvalue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.formpackage.InputInvalidResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.formpackage.InputInvalidResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.formpackage.InputInvalidResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.formpackage.InputInvalidResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndex();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getError();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getErrorvalue();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getNumvalue();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getTextvalue();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional int32 Index = 1;
 * @return {number}
 */
proto.formpackage.InputInvalidResponse.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.formpackage.InputInvalidResponse.prototype.setIndex = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional ErrorType Error = 2;
 * @return {!proto.formpackage.ErrorType}
 */
proto.formpackage.InputInvalidResponse.prototype.getError = function() {
  return /** @type {!proto.formpackage.ErrorType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.formpackage.ErrorType} value */
proto.formpackage.InputInvalidResponse.prototype.setError = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional double ErrorValue = 3;
 * @return {number}
 */
proto.formpackage.InputInvalidResponse.prototype.getErrorvalue = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.formpackage.InputInvalidResponse.prototype.setErrorvalue = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional double NumValue = 4;
 * @return {number}
 */
proto.formpackage.InputInvalidResponse.prototype.getNumvalue = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.formpackage.InputInvalidResponse.prototype.setNumvalue = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string textValue = 5;
 * @return {string}
 */
proto.formpackage.InputInvalidResponse.prototype.getTextvalue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.formpackage.InputInvalidResponse.prototype.setTextvalue = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.formpackage.PriceResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.formpackage.PriceResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.formpackage.PriceResponse.displayName = 'proto.formpackage.PriceResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.formpackage.PriceResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.formpackage.PriceResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.formpackage.PriceResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.formpackage.PriceResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    price: +jspb.Message.getFieldWithDefault(msg, 1, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.formpackage.PriceResponse}
 */
proto.formpackage.PriceResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.formpackage.PriceResponse;
  return proto.formpackage.PriceResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.formpackage.PriceResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.formpackage.PriceResponse}
 */
proto.formpackage.PriceResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPrice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.formpackage.PriceResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.formpackage.PriceResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.formpackage.PriceResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.formpackage.PriceResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPrice();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
};


/**
 * optional double Price = 1;
 * @return {number}
 */
proto.formpackage.PriceResponse.prototype.getPrice = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.formpackage.PriceResponse.prototype.setPrice = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.formpackage.SendChoice = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.formpackage.SendChoice, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.formpackage.SendChoice.displayName = 'proto.formpackage.SendChoice';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.formpackage.SendChoice.prototype.toObject = function(opt_includeInstance) {
  return proto.formpackage.SendChoice.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.formpackage.SendChoice} msg The msg instance to transform.
 * @return {!Object}
 */
proto.formpackage.SendChoice.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    label: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.formpackage.SendChoice}
 */
proto.formpackage.SendChoice.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.formpackage.SendChoice;
  return proto.formpackage.SendChoice.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.formpackage.SendChoice} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.formpackage.SendChoice}
 */
proto.formpackage.SendChoice.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.formpackage.SendChoice.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.formpackage.SendChoice.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.formpackage.SendChoice} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.formpackage.SendChoice.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getLabel();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 Id = 1;
 * @return {number}
 */
proto.formpackage.SendChoice.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.formpackage.SendChoice.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string Label = 2;
 * @return {string}
 */
proto.formpackage.SendChoice.prototype.getLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.formpackage.SendChoice.prototype.setLabel = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.formpackage.InpType = {
  TEXT: 0,
  INTEGER: 1,
  FLOAT: 2,
  OPTIONS: 3
};

/**
 * @enum {number}
 */
proto.formpackage.ErrorType = {
  REQUIRED: 0,
  EQUAL: 1,
  NOTEQUAL: 2,
  GREATERTHAN: 3,
  LESSTHAN: 4
};

